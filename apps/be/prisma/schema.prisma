generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  firstName String? @map("first_name")
  lastName  String? @map("last_name")

  email    String   @unique
  password String
  role     UserRole @default(MEMBER)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updatedAt")

  organizationsOwned      Organization[]       @relation("owner")
  organizationMemberships OrganizationMember[]

  acceptedInvite   OrganizationInvite? @relation(fields: [acceptedInviteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  acceptedInviteId String?             @unique @map("accepted_invite_id") @db.ObjectId

  @@map("users")
}

model Organization {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  ownerId String @map("owner_id") @db.ObjectId
  owner   User   @relation("owner", fields: [ownerId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  members OrganizationMember[]

  invites OrganizationInvite[]

  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  userId         String           @map("user_id") @db.ObjectId
  organizationId String           @map("organization_id") @db.ObjectId
  role           OrganizationRole

  user         User         @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("organization_members")
}

model OrganizationInvite {
  id     String           @id @default(auto()) @map("_id") @db.ObjectId
  name   String
  token  String?          @unique
  status InviteStatus     @default(PENDING)
  role   OrganizationRole

  acceptedById String? @map("accepted_by_id")
  acceptedBy   User?

  organizationId String       @map("organization_id") @db.ObjectId
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  decideAt  DateTime? @map("decide_at")
  createdAt DateTime  @default(now()) @map("created_at")

  @@unique([acceptedById, organizationId])
  @@map("organization_invites")
}

enum InviteStatus {
  PENDING
  USER_ACCEPT
  USER_REJECT
  ADMIN_REJECT
}

enum OrganizationRole {
  OWNER
  ADMIN
  MEMBER
}

enum UserRole {
  OWNER
  MEMBER
  ADMIN
}
